<#--

Copyright (C) 2017 Markus Junginger, greenrobot (http://greenrobot.org)
                                                                           
This file is part of ObjectBox Generator.
                                                                           
ObjectBox Generator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by       
the Free Software Foundation, either version 3 of the License, or          
(at your option) any later version.                                        
ObjectBox Generator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of             
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
GNU General Public License for more details.                               
                                                                           
You should have received a copy of the GNU General Public License          
along with ObjectBox Generator.  If not, see <http://www.gnu.org/licenses/>.

-->
<#-- @ftlvariable name="entity" type="io.objectbox.generator.model.Entity" -->
<#-- @ftlvariable name="schema" type="io.objectbox.generator.model.Schema" -->

package ${entity.javaPackageDao};

import io.objectbox.Properties;
import io.objectbox.Property;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.IdGetter;

<#-- For custom types only here. TODO: do not import relation stuff -->
<#if entity.additionalImportsDao?has_content>

<#list entity.additionalImportsDao as additionalImport>
import ${additionalImport};
</#list>
</#if>

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "${entity.dbName}". Can be used for QueryBuilder and for referencing DB names.
 */
public class ${entity.className}_ implements Properties {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __DB_NAME = "${entity.dbName}";

    @Internal
    static final ${entity.className}IdGetter __ID_GETTER = new ${entity.className}IdGetter();

<#list entity.propertiesColumns as property>
    public final static Property ${property.propertyName} = new Property(${property_index}, <#if
    property.modelId??>${property.modelId.id?c}<#else>0</#if>, ${property.javaType}.class, "${property.propertyName}"<#if
    property.primaryKey || (property.dbName?? && property.dbName != property.propertyName) || property.converter??>, ${property.primaryKey?string}, "${property.dbName}"<#if
property.converter??>, ${property.converterClassName}.class, ${property.customTypeClassName}.class</#if></#if>);
</#list>

    public final static Property[] __ALL_PROPERTIES = {
<#list entity.propertiesColumns as property>
        ${property.propertyName}<#if property?has_next>,</#if>
</#list>
    };

    public final static Property __ID_PROPERTY = ${entity.pkProperty.propertyName};

    @Override
    public Property[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public Property getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public IdGetter<${entity.className}> getIdGetter() {
        return __ID_GETTER;
    }

    @Internal
    static final class ${entity.className}IdGetter implements IdGetter<${entity.className}> {
        public long getId(${entity.className} object) {
<#if entity.pkProperty.nonPrimitiveType>
            ${entity.pkProperty.javaType} id = object.${entity.pkProperty.valueExpression};
            return id != null? id : 0;
</#if>
            return object.${entity.pkProperty.valueExpression};
        }
    }
}
