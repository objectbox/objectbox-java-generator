// https://docs.gradle.org/current/userguide/custom_plugins.html
apply plugin: 'kotlin'
apply plugin: 'groovy' // for dsl tests
apply plugin: 'maven'

group = 'io.objectbox'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

def genResourcesDir = new File(buildDir, 'src/generated/resources')
def versionFile = new File(genResourcesDir, 'io/objectbox/gradle/version.properties')

sourceSets {
    main {
        resources {
            srcDir genResourcesDir
        }
    }
}

dependencies {
    compile gradleApi()
    compile project(':greendao-code-modifier')
    compileOnly 'com.android.tools.build:gradle:2.2.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile gradleTestKit()
}

// puts artifact version to properties file inside resources
task generateVersionProperties {
    inputs.property 'version', project.version
    outputs.file versionFile

    doLast {
        versionFile.parentFile.mkdirs()
        versionFile.withWriter {
            it.write """# Generated by gradle task generateVersionProperties
version=${project.version}
"""
        }
    }
}

tasks['compileKotlin'].dependsOn generateVersionProperties

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from 'README'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from 'README'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            // Basic definitions are defined in root project
            pom.project {
                name 'ObjectBox Gradle Plugin'
                description 'Gradle Plugin for ObjectBox (NoSQL for Objects)'
            }
        }
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

//
//dependencies {
//    testRuntime files(createClasspathManifest)
//}