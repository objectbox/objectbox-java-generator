// https://docs.gradle.org/current/userguide/custom_plugins.html
apply plugin: 'kotlin'
apply plugin: 'groovy' // for dsl tests
apply plugin: 'de.fuerstenau.buildconfig'
apply plugin: 'idea' // to pick up generated BuildConfig in IntelliJ

group = 'io.objectbox'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    compile gradleApi()
    compile project(':objectbox-code-modifier')
    compileOnly "com.android.tools.build:gradle:$android_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.javassist:javassist:3.24.1-GA'

    // For Transformer to resolve class dependencies to (real) ObjectBox classes
    compile "io.objectbox:objectbox-java:$objectbox_java_version"
    compile "io.objectbox:objectbox-java-api:$objectbox_java_version"

    testCompile gradleTestKit()
    testCompile "junit:junit:$junit_version"
    testCompile "org.mockito:mockito-core:$mockito_version"
    // For plugin apply tests and outdated TestKit tests (dir "test-gradle-projects").
    testCompile "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    testCompile "com.android.tools.build:gradle:$android_version"
}

buildConfig {
    // rename to avoid conflict with other build config files (modules use same root package)
    clsName = 'GradlePluginBuildConfig'
    // also add runtime version to BuildConfig
    buildConfigField 'String', 'VERSION_RUNTIME', {"$objectbox_runtime_version"}
}

apply from: rootProject.file("gradle/objectbox-publish.gradle")

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from 'README'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from 'README'
}

artifacts {
    // jar added by java plugin.
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            // Basic definitions are defined in root project
            pom.project {
                name 'ObjectBox Gradle Plugin'
                description 'Gradle Plugin for ObjectBox (NoSQL for Objects)'

                licenses {
                    license {
                        name 'GNU General Public License, Version 3'
                        url 'http://www.gnu.org/licenses/gpl.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")
    def files = sourceSets.test.runtimeClasspath

    inputs.files files
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = files.join("\n")
    }
}

// Works with gradle build, but not in IntelliJ -> run manually
tasks['test'].dependsOn createClasspathManifest

//
//dependencies {
//    testRuntime files(createClasspathManifest)
//}