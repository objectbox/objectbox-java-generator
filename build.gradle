buildscript {
    ext.android_version = '2.3.3'
    ext.kotlin_version = '1.1.3-2'
    ext.objectbox_plugin_version = '1.3.0-SNAPSHOT' // used to version this projects' artifacts
//    ext.objectbox_java_version = '0.9.13' // used for dependencies (runtime library)
    ext.objectbox_java_version = ext.objectbox_plugin_version // used for dependencies (runtime library)

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // TODO ut: remove ASM dependency once shadow plugin has updated ASM to 5.1+
        // override ASM version as pre 5.1 has VerifyError bug, but shadow plugin ships older version
        classpath 'org.ow2.asm:asm:5.1'
        classpath 'org.ow2.asm:asm-commons:5.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task cleanOut {
    description 'Clears IntelliJ build folders "out/"'
    doLast {
        project.allprojects {
            def outDir = file("out")
            if(outDir.isDirectory()) {
                def deleted = delete outDir
                println "Deleted dir \"${outDir.getAbsolutePath()}\": $deleted"
            }
        }
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'

    version = "$objectbox_plugin_version"

    repositories {
        jcenter()
        mavenCentral()
        maven {
            credentials {
                username exampleUser
                password examplePassword
            }
            url "https://example.org/mvnrepo/"
        }
        mavenLocal()
        maven { url "http://objectbox.net/beta-repo/" }
    }

    configurations {
        deployerJars
    }

    dependencies {
        deployerJars 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
        deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
    }

    signing {
        if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') &&
                project.hasProperty('signing.secretKeyRingFile')) {
            sign configurations.archives
        } else {
            println "Signing information missing/incomplete for ${project.name}"
        }
    }

    // Use afterEvaluate or all dependencies will be lost in the generated POM
    afterEvaluate {
        uploadArchives {
            repositories {
                mavenDeployer {
                    if (project.hasProperty('preferedRepo') && preferedRepo == 'local') {
                        repository url: repositories.mavenLocal().url
                    } else if (project.hasProperty('preferedRepo') && project.hasProperty('preferedUsername')
                            && project.hasProperty('preferedPassword')) {
                        configuration = configurations.deployerJars
                        // Replace for bintray's dynamic URL
                        preferedRepo = preferedRepo.replace('__groupId__', project.group)
                        preferedRepo = preferedRepo.replace('__artifactId__', project.archivesBaseName)
                        // println preferedRepo
                        repository(url: preferedRepo) {
                            authentication(userName: preferedUsername, password: preferedPassword)
                        }
                    } else if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                        def isSnapshot = version.endsWith('-SNAPSHOT')
                        def sonatypeRepositoryUrl = isSnapshot ?
                                "https://oss.sonatype.org/content/repositories/snapshots/"
                                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                        repository(url: sonatypeRepositoryUrl) {
                            authentication(userName: sonatypeUsername, password: sonatypePassword)
                        }
                    } else {
                        println "Settings sonatypeUsername/sonatypePassword missing/incomplete for ${project.name}"
                    }

                    pom.project {
                        packaging 'jar'
                        url 'http://objectbox.io'

                        scm {
                            url 'https://github.com/greenrobot/ObjectBox'
                            connection 'scm:git@github.com:greenrobot/ObjectBox.git'
                            developerConnection 'scm:git@github.com:greenrobot/ObjectBox.git'
                        }

                        developers {
                            developer {
                                id 'ObjectBox'
                                name 'ObjectBox'
                            }
                        }

                        issueManagement {
                            system 'GitHub Issues'
                            url 'https://github.com/greenrobot/ObjectBox/issues'
                        }

                        organization {
                            name 'ObjectBox Ltd.'
                            url 'http://objectbox.io'
                        }
                    }
                }
            }
        }
    }
}
