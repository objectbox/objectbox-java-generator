buildscript {
    ext {
        android_version = '3.6.3' // Minimal supported version is 3.0.0. http://google.github.io/android-gradle-dsl/javadoc/
        kotlin_version = '1.3.72'
        essentials_version = '3.0.0-RC1'
        junit_version = '4.13'
        mockito_version = '3.3.3'
        moshi_version = '1.9.2'

        // Typically, only edit those two:
        def versionNumber = '2.7.0' // Without "-SNAPSHOT", e.g. '2.5.0' or '2.4.0-RC'.
        def isRelease = true  // Set to true for releasing to ignore versionPostFix to avoid e.g. "-dev" versions.

        def libsRelease = isRelease  // e.g. diverge if plugin is still SNAPSHOT, but libs are already final
        def libsVersion = versionNumber + (libsRelease ? "" : "-dev-SNAPSHOT")

        // Calculate version codes.
        def versionPostFix
        if (isRelease) {
            versionPostFix = ""
        } else if (project.hasProperty('versionPostFix')) {
            versionPostFix = "-${project.versionPostFix}-SNAPSHOT"
        } else {
            versionPostFix = "-dev-SNAPSHOT"
        }

        objectbox_plugin_version = versionNumber + versionPostFix // Artifact versions of this project.
        objectbox_java_version = libsVersion // Java library used by sub-projects.
        applies_ob_java_version = libsVersion // Java library added to projects applying the plugin.
        applies_ob_native_version = libsVersion // Native libraries added to projects applying the plugin.

        println "version=$objectbox_plugin_version\n" +
                "objectbox_java_version=$objectbox_java_version\n" +
                "applies_ob_java_version=$applies_ob_java_version\n" +
                "applies_ob_native_version=$applies_ob_native_version\n"

        // Internal Maven repo: used in all projects, printing info/warning only once here.
        hasInternalObjectBoxRepo = project.hasProperty('internalObjectBoxRepo')
        if (hasInternalObjectBoxRepo) {
            println("Using internal ObjectBox repository $internalObjectBoxRepo.")
        } else {
            println "Warning: internalObjectBoxRepo, internalObjectBoxRepoUser and internalObjectBoxRepoPassword missing from gradle.properties."
        }
    }

    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8" // for code-modifier, gradle-plugin
        classpath "com.github.ben-manes:gradle-versions-plugin:0.28.0"
    }
}

apply plugin: "com.github.ben-manes.versions"
apply from: 'gradle/objectbox-deploy.gradle'

subprojects {
    version = "$objectbox_plugin_version"

    repositories {
        jcenter()
        mavenCentral()
        google()
        if (hasInternalObjectBoxRepo) {
            maven {
                credentials {
                    username internalObjectBoxRepoUser
                    password internalObjectBoxRepoPassword
                }
                url internalObjectBoxRepo
            }
        }
        mavenLocal()
    }

    configurations.all {
        // Projects are using snapshot dependencies that may update more often than 24 hours.
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

task cleanOut {
    description 'Clears IntelliJ build folders "out/"'
    doLast {
        project.allprojects {
            def outDir = file("out")
            if(outDir.isDirectory()) {
                def deleted = delete outDir
                println "Deleted dir \"${outDir.getAbsolutePath()}\": $deleted"
            }
        }
    }
}

wrapper {
    distributionType Wrapper.DistributionType.ALL
}
