buildscript {
    ext {
        android_version = '3.3.0' // minimal supported version is 3.0.0
        kotlin_version = '1.3.21'
        mockito_version = '2.25.1'

        // version post fix: '-<value>' or '' if not defined
        def versionPostFixValue = project.findProperty('versionPostFix')
        def versionPostFix = versionPostFixValue ? "-$versionPostFixValue" : ''
        
        objectbox_plugin_version = "2.4.0$versionPostFix-SNAPSHOT" // plugin, processor, generator and code-modifier version
        def dependencies_version = '2.4.0-SNAPSHOT'
        objectbox_java_version = dependencies_version // Java version used by code and tests
        objectbox_runtime_version = dependencies_version // The plugin adds dependencies with this version to projects applying it

        println "Version $objectbox_plugin_version with dependency on Java $objectbox_java_version. " +
                "Adds dependencies with version $objectbox_runtime_version."
    }

    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8" // for code-modifier, gradle-plugin
        classpath "com.github.ben-manes:gradle-versions-plugin:0.21.0"
    }
}

apply plugin: "com.github.ben-manes.versions"
apply from: 'gradle/objectbox-deploy.gradle'

subprojects {
    version = "$objectbox_plugin_version"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
}

task cleanOut {
    description 'Clears IntelliJ build folders "out/"'
    doLast {
        project.allprojects {
            def outDir = file("out")
            if(outDir.isDirectory()) {
                def deleted = delete outDir
                println "Deleted dir \"${outDir.getAbsolutePath()}\": $deleted"
            }
        }
    }
}
